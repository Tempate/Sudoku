#include <iostream>
#include <cassert>
#include <array>
#include <vector>

#include "../src/board.h"
#include "main.h"

void test_board_complete() {
    static constexpr std::array<std::array<std::array<int, WIDTH>, HEIGHT>, 2> incomplete_board_values = {{
        {{
            {0,0,3,0,0,1,7,2,0},
            {0,0,0,0,0,4,0,0,0},
            {0,0,0,7,0,0,1,4,9},
            {0,1,4,8,0,0,0,0,5},
            {2,8,0,0,0,0,0,7,4},
            {7,0,0,0,0,2,6,8,0},
            {9,5,2,0,0,8,0,0,0},
            {0,0,0,3,0,0,0,0,0},
            {0,6,7,9,0,0,4,0,0}
        }}, {{
            {0,0,5,8,0,0,0,0,7},
            {4,0,0,0,0,0,0,0,0},
            {0,0,0,0,3,0,0,2,8},
            {2,0,0,0,0,4,5,0,0},
            {0,0,4,0,0,0,0,0,0},
            {0,0,0,0,7,6,0,3,0},
            {8,0,1,7,0,0,4,0,0},
            {0,0,2,1,8,0,0,0,0},
            {7,0,0,0,0,0,3,8,0}
        }}
    }};

    static const std::array<std::array<std::array<int, WIDTH>, HEIGHT>, 2> complete_board_values = {{
        {{
            {1,2,3,4,5,6,7,8,9},
            {1,2,3,4,5,6,7,8,9},
            {1,2,3,4,5,6,7,8,9},
            {1,2,3,4,5,6,7,8,9},
            {1,2,3,4,5,6,7,8,9},
            {1,2,3,4,5,6,7,8,9},
            {1,2,3,4,5,6,7,8,9},
            {1,2,3,4,5,6,7,8,9},
            {1,2,3,4,5,6,7,8,9}
        }}, {{
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1}
        }}
    }};

    for (const auto value : incomplete_board_values) {
        Board board{value};
        assert(!board.complete());
    }

    for (const auto value : complete_board_values) {
        Board board{value};
        assert(board.complete());
    }
}

void test_board_check() {
    std::array<std::array<std::array<int, WIDTH>, HEIGHT>, 2> wrong_board_values = {{
        {{
            {1,2,3,4,5,6,7,8,9},
            {9,1,2,3,4,5,6,7,8},
            {8,9,1,2,3,4,5,6,7},
            {7,8,9,1,2,3,4,5,6},
            {6,7,8,9,1,2,3,4,5},
            {5,6,7,8,9,1,2,3,4},
            {4,5,6,7,8,9,1,2,3},
            {3,4,5,6,7,8,9,1,2},
            {2,3,4,5,6,7,8,9,1}
        }}, {{
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1},
            {1,1,1,1,1,1,1,1,1}
        }}
    }};

    std::array<std::array<std::array<int, WIDTH>, HEIGHT>, 2> right_board_values = {{
        {{
            {1,2,3,4,5,6,7,8,9},
            {7,8,9,1,2,3,4,5,6},
            {4,5,6,7,8,9,1,2,3},
            {2,3,1,5,6,4,8,9,7},
            {8,9,7,2,3,1,5,6,4},
            {5,6,4,8,9,7,2,3,1},
            {3,1,2,6,4,5,9,7,8},
            {9,7,8,3,1,2,6,4,5},
            {6,4,5,9,7,8,3,1,2}
        }}, {{
            {8,1,2,3,5,6,7,9,4},
            {3,5,6,7,9,4,8,1,2},
            {7,9,4,8,1,2,3,5,6},
            {1,2,8,5,6,3,9,4,7},
            {5,6,3,9,4,7,1,2,8},
            {9,4,7,1,2,8,5,6,3},
            {2,8,1,6,3,5,4,7,9},
            {6,3,5,4,7,9,2,8,1},
            {4,7,9,2,8,1,6,3,5}
        }}
    }};

    for (const auto value : wrong_board_values) {
        Board board{value};
        assert(board.complete());
        assert(!board.check());
    }

    for (const auto value : right_board_values) {
        Board board{value};
        assert(board.complete());
        assert(board.check());
    }
}
